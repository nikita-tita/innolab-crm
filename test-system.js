const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testSystem() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã InnoLab CRM...\n')

  try {
    // Test database connection
    console.log('1. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    await prisma.$connect()
    console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')

    // Check users
    const usersCount = await prisma.user.count()
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${usersCount}`)

    // Check ideas
    const ideasCount = await prisma.idea.count()
    console.log(`   ‚úÖ –ò–¥–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${ideasCount}`)

    // Check hypotheses
    const hypothesesCount = await prisma.hypothesis.count()
    console.log(`   ‚úÖ –ì–∏–ø–æ—Ç–µ–∑ –≤ —Å–∏—Å—Ç–µ–º–µ: ${hypothesesCount}`)

    // Check experiments
    const experimentsCount = await prisma.experiment.count()
    console.log(`   ‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${experimentsCount}`)

    // Check MVPs
    const mvpsCount = await prisma.mVP.count()
    console.log(`   ‚úÖ MVP –≤ —Å–∏—Å—Ç–µ–º–µ: ${mvpsCount}`)

    // Check experiment results
    const resultsCount = await prisma.experimentResult.count()
    console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: ${resultsCount}`)

    // Check success criteria
    const criteriaCount = await prisma.successCriteria.count()
    console.log(`   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞: ${criteriaCount}`)

    console.log('\n2. üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...')

    // Check experiment with results and criteria
    const experimentWithData = await prisma.experiment.findFirst({
      include: {
        results: true,
        hypothesis: {
          include: {
            successCriteria: true
          }
        }
      },
      where: {
        results: {
          some: {}
        }
      }
    })

    if (experimentWithData) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç "${experimentWithData.title}" —Å ${experimentWithData.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏`)
      console.log(`   ‚úÖ –£ –≥–∏–ø–æ—Ç–µ–∑—ã ${experimentWithData.hypothesis.successCriteria.length} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞`)

      // Test analysis logic
      const { results } = experimentWithData
      const successCriteria = experimentWithData.hypothesis.successCriteria

      const criteriaWithResults = successCriteria.map(criteria => {
        const matchingResult = results.find(result =>
          result.metricName.toLowerCase().includes(criteria.name.toLowerCase()) ||
          criteria.name.toLowerCase().includes(result.metricName.toLowerCase())
        )
        return {
          criteria: criteria.name,
          target: criteria.targetValue,
          actual: matchingResult?.value || null,
          achieved: matchingResult ? matchingResult.value >= criteria.targetValue : false
        }
      })

      const achievedCount = criteriaWithResults.filter(c => c.achieved).length
      const successRate = criteriaWithResults.length > 0 ? (achievedCount / criteriaWithResults.length) * 100 : 0

      console.log(`   ‚úÖ –ê–Ω–∞–ª–∏–∑: ${achievedCount}/${criteriaWithResults.length} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ (${successRate.toFixed(0)}%)`)
    }

    console.log('\n3. üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ MVP —Å–∏—Å—Ç–µ–º—ã...')
    const mvpWithProgress = await prisma.mVP.findFirst({
      include: {
        experiment: {
          include: {
            hypothesis: {
              include: {
                idea: true
              }
            }
          }
        }
      }
    })

    if (mvpWithProgress) {
      console.log(`   ‚úÖ MVP "${mvpWithProgress.title}" —Å–≤—è–∑–∞–Ω —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º "${mvpWithProgress.experiment.title}"`)
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å MVP: ${mvpWithProgress.status}`)
      console.log(`   ‚úÖ –¢–∏–ø MVP: ${mvpWithProgress.type}`)
    }

    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ InnoLab CRM –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
    console.log('\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:')
    console.log('   üí° Ideas Management - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ—è–º–∏')
    console.log('   üî¨ Hypothesis Testing - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑')
    console.log('   üß™ Experiment Management - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏')
    console.log('   üìä Results Analysis - –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ò–ò')
    console.log('   üöÄ MVP Development - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP')
    console.log('   üìà Lifecycle Tracking - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞')

    console.log('\nüåê Production URL: https://innolab-6comt0zes-nikita-tita-projects.vercel.app')
    console.log('\nüîê –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: demo@innolab.com)')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testSystem()