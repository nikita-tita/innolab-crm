"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Plus, Edit, Check, X, Target, TrendingUp } from "lucide-react"

interface SuccessCriteria {
  id: string
  name: string
  description: string
  targetValue: number
  unit: string
  actualValue?: number
  status: "not_set" | "in_progress" | "achieved" | "failed"
  priority: "high" | "medium" | "low"
}

interface SuccessCriteriaManagerProps {
  hypothesisId: string
  initialCriteria: SuccessCriteria[]
  onSave: (criteria: SuccessCriteria[]) => void
  disabled?: boolean
  showProgress?: boolean
}

export function SuccessCriteriaManager({
  hypothesisId,
  initialCriteria,
  onSave,
  disabled = false,
  showProgress = false
}: SuccessCriteriaManagerProps) {
  const [criteria, setCriteria] = useState<SuccessCriteria[]>(initialCriteria)
  const [isEditing, setIsEditing] = useState<string | null>(null)
  const [isAdding, setIsAdding] = useState(false)
  const [newCriteria, setNewCriteria] = useState<Partial<SuccessCriteria>>({
    name: "",
    description: "",
    targetValue: 0,
    unit: "%",
    priority: "medium",
    status: "not_set"
  })

  const handleAddCriteria = () => {
    if (!newCriteria.name || !newCriteria.description) return

    const criteria_item: SuccessCriteria = {
      id: Date.now().toString(),
      name: newCriteria.name,
      description: newCriteria.description,
      targetValue: newCriteria.targetValue || 0,
      unit: newCriteria.unit || "%",
      priority: newCriteria.priority as "high" | "medium" | "low",
      status: "not_set"
    }

    setCriteria([...criteria, criteria_item])
    setNewCriteria({
      name: "",
      description: "",
      targetValue: 0,
      unit: "%",
      priority: "medium",
      status: "not_set"
    })
    setIsAdding(false)
    onSave([...criteria, criteria_item])
  }

  const handleUpdateCriteria = (id: string, updates: Partial<SuccessCriteria>) => {
    const updated = criteria.map(c => c.id === id ? { ...c, ...updates } : c)
    setCriteria(updated)
    onSave(updated)
    setIsEditing(null)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "achieved": return "bg-green-100 text-green-800"
      case "failed": return "bg-red-100 text-red-800"
      case "in_progress": return "bg-yellow-100 text-yellow-800"
      default: return "bg-gray-100 text-gray-800"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "achieved": return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç"
      case "failed": return "–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"
      case "in_progress": return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
      default: return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "bg-red-100 text-red-800"
      case "medium": return "bg-yellow-100 text-yellow-800"
      case "low": return "bg-blue-100 text-blue-800"
      default: return "bg-gray-100 text-gray-800"
    }
  }

  const achievedCount = criteria.filter(c => c.status === "achieved").length
  const totalCount = criteria.length
  const successRate = totalCount > 0 ? Math.round((achievedCount / totalCount) * 100) : 0

  return (
    <div className="space-y-6">
      {/* –¢–µ–æ—Ä–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ */}
      <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
        <CardHeader>
          <CardTitle className="text-green-900">üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞?</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-green-800 space-y-3">
          <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞</strong> - —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–º–µ—Ä–∏–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –ª–∏ –≤–∞—à–∞ –≥–∏–ø–æ—Ç–µ–∑–∞.</p>

          <div className="grid md:grid-cols-3 gap-4 mt-4">
            <div className="p-3 bg-white rounded border">
              <h4 className="font-medium text-green-900 mb-2">–ü—Ä–∏–Ω—Ü–∏–ø—ã SMART:</h4>
              <ul className="text-xs space-y-1">
                <li>‚Ä¢ <strong>S</strong>pecific - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ</li>
                <li>‚Ä¢ <strong>M</strong>easurable - –ò–∑–º–µ—Ä–∏–º—ã–µ</li>
                <li>‚Ä¢ <strong>A</strong>chievable - –î–æ—Å—Ç–∏–∂–∏–º—ã–µ</li>
                <li>‚Ä¢ <strong>R</strong>elevant - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ</li>
                <li>‚Ä¢ <strong>T</strong>ime-bound - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏</li>
              </ul>
            </div>
            <div className="p-3 bg-white rounded border">
              <h4 className="font-medium text-green-900 mb-2">–¢–∏–ø—ã –º–µ—Ç—Ä–∏–∫:</h4>
              <ul className="text-xs space-y-1">
                <li>‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (—á–∏—Å–ª–æ, %)</li>
                <li>‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (NPS, –æ—Ç–∑—ã–≤—ã)</li>
                <li>‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ (–∫–ª–∏–∫–∏, –≤—Ä–µ–º—è)</li>
                <li>‚Ä¢ –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏ (–≤—ã—Ä—É—á–∫–∞, LTV)</li>
                <li>‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ (—Å–∫–æ—Ä–æ—Å—Ç—å, –æ—à–∏–±–∫–∏)</li>
              </ul>
            </div>
            <div className="p-3 bg-white rounded border">
              <h4 className="font-medium text-green-900 mb-2">–ü—Ä–∏–º–µ—Ä—ã:</h4>
              <ul className="text-xs space-y-1">
                <li>‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ 15%</li>
                <li>‚Ä¢ NPS –≤—ã—Ä–∞—Å—Ç–µ—Ç —Å 6 –¥–æ 8</li>
                <li>‚Ä¢ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ < 2 —Å–µ–∫</li>
                <li>‚Ä¢ 80% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ—É–Ω–∫—Ü–∏—é</li>
                <li>‚Ä¢ –í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ $10K</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º */}
      {showProgress && totalCount > 0 && (
        <Card className="bg-blue-50 border-blue-200">
          <CardHeader>
            <CardTitle className="text-blue-900 flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —É—Å–ø–µ—Ö–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between mb-4">
              <span className="text-sm text-blue-800">
                –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ {achievedCount} –∏–∑ {totalCount} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
              </span>
              <Badge variant={successRate >= 80 ? "default" : successRate >= 50 ? "secondary" : "destructive"}>
                {successRate}% —É—Å–ø–µ—Ö–∞
              </Badge>
            </div>
            <div className="w-full bg-blue-200 rounded-full h-3">
              <div
                className={`h-3 rounded-full transition-all duration-300 ${
                  successRate >= 80 ? "bg-green-500" : successRate >= 50 ? "bg-yellow-500" : "bg-red-500"
                }`}
                style={{ width: `${successRate}%` }}
              />
            </div>
          </CardContent>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≥–∏–ø–æ—Ç–µ–∑—ã</CardTitle>
          {!disabled && (
            <Button
              onClick={() => setIsAdding(true)}
              className="bg-green-600 hover:bg-green-700"
              size="sm"
            >
              <Plus className="h-4 w-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π
            </Button>
          )}
        </CardHeader>
        <CardContent className="space-y-4">
          {criteria.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Target className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p>–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</p>
              <p className="text-sm mt-2">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
            </div>
          ) : (
            criteria.map((criterion) => (
              <div key={criterion.id} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{criterion.name}</h4>
                    <p className="text-sm text-gray-600 mt-1">{criterion.description}</p>
                  </div>
                  <div className="flex items-center gap-2 ml-4">
                    <Badge className={getPriorityColor(criterion.priority)}>
                      {criterion.priority === "high" ? "–í—ã—Å–æ–∫–∏–π" : criterion.priority === "medium" ? "–°—Ä–µ–¥–Ω–∏–π" : "–ù–∏–∑–∫–∏–π"}
                    </Badge>
                    <Badge className={getStatusColor(criterion.status)}>
                      {getStatusText(criterion.status)}
                    </Badge>
                    {!disabled && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setIsEditing(criterion.id)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">–¶–µ–ª—å:</span>
                    <p className="text-gray-900">{criterion.targetValue}{criterion.unit}</p>
                  </div>
                  {criterion.actualValue !== undefined && (
                    <div>
                      <span className="font-medium text-gray-700">–§–∞–∫—Ç:</span>
                      <p className={`font-medium ${
                        criterion.actualValue >= criterion.targetValue ? "text-green-600" : "text-red-600"
                      }`}>
                        {criterion.actualValue}{criterion.unit}
                      </p>
                    </div>
                  )}
                  {criterion.actualValue !== undefined && (
                    <div>
                      <span className="font-medium text-gray-700">–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</span>
                      <p className={`font-medium ${
                        criterion.actualValue >= criterion.targetValue ? "text-green-600" : "text-red-600"
                      }`}>
                        {criterion.actualValue >= criterion.targetValue ? "+" : ""}
                        {((criterion.actualValue - criterion.targetValue) / criterion.targetValue * 100).toFixed(1)}%
                      </p>
                    </div>
                  )}
                </div>

                {isEditing === criterion.id && (
                  <div className="border-t pt-3 space-y-3">
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        </label>
                        <input
                          type="number"
                          defaultValue={criterion.actualValue || ""}
                          onChange={(e) => {
                            const actualValue = parseFloat(e.target.value)
                            const newStatus = actualValue >= criterion.targetValue ? "achieved" : "failed"
                            handleUpdateCriteria(criterion.id, {
                              actualValue: isNaN(actualValue) ? undefined : actualValue,
                              status: isNaN(actualValue) ? "in_progress" : newStatus
                            })
                          }}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                        />
                      </div>
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          –°—Ç–∞—Ç—É—Å
                        </label>
                        <select
                          defaultValue={criterion.status}
                          onChange={(e) => handleUpdateCriteria(criterion.id, { status: e.target.value as any })}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                        >
                          <option value="not_set">–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</option>
                          <option value="in_progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                          <option value="achieved">–î–æ—Å—Ç–∏–≥–Ω—É—Ç</option>
                          <option value="failed">–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</option>
                        </select>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button size="sm" onClick={() => setIsEditing(null)}>
                        <Check className="h-4 w-4 mr-1" />
                        –ì–æ—Ç–æ–≤–æ
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ))
          )}

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è */}
          {isAdding && (
            <div className="border-2 border-dashed border-green-300 rounded-lg p-4 space-y-4">
              <h4 className="font-medium text-green-900">–ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞</h4>
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
                  </label>
                  <input
                    type="text"
                    value={newCriteria.name || ""}
                    onChange={(e) => setNewCriteria({ ...newCriteria, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                  </label>
                  <select
                    value={newCriteria.priority || "medium"}
                    onChange={(e) => setNewCriteria({ ...newCriteria, priority: e.target.value as any })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  >
                    <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="low">–ù–∏–∑–∫–∏–π</option>
                  </select>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={newCriteria.description || ""}
                  onChange={(e) => setNewCriteria({ ...newCriteria, description: e.target.value })}
                  rows={2}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                  </label>
                  <input
                    type="number"
                    value={newCriteria.targetValue || ""}
                    onChange={(e) => setNewCriteria({ ...newCriteria, targetValue: parseFloat(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                  </label>
                  <select
                    value={newCriteria.unit || "%"}
                    onChange={(e) => setNewCriteria({ ...newCriteria, unit: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                  >
                    <option value="%">%</option>
                    <option value="—à—Ç">—à—Ç</option>
                    <option value="—Ä—É–±">—Ä—É–±</option>
                    <option value="—Å–µ–∫">—Å–µ–∫</option>
                    <option value="–±–∞–ª–ª—ã">–±–∞–ª–ª—ã</option>
                    <option value="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
                  </select>
                </div>
              </div>
              <div className="flex gap-3">
                <Button onClick={handleAddCriteria} className="bg-green-600 hover:bg-green-700">
                  <Plus className="h-4 w-4 mr-1" />
                  –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π
                </Button>
                <Button variant="outline" onClick={() => setIsAdding(false)}>
                  <X className="h-4 w-4 mr-1" />
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –°–æ–≤–µ—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —É—Å–ø–µ—Ö–∞ */}
      <Card className="bg-purple-50 border-purple-200">
        <CardHeader>
          <CardTitle className="text-purple-900">üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞</CardTitle>
        </CardHeader>
        <CardContent className="text-sm text-purple-800">
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-2">–•–æ—Ä–æ—à–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:</h4>
              <ul className="space-y-1 text-xs">
                <li>‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
                <li>‚úÖ –°–≤—è–∑–∞–Ω—ã —Å –±–∏–∑–Ω–µ—Å-—Ü–µ–ª—è–º–∏</li>
                <li>‚úÖ –ú–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ</li>
                <li>‚úÖ –ò–º–µ—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏</li>
                <li>‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-2">–ò–∑–±–µ–≥–∞–π—Ç–µ:</h4>
              <ul className="space-y-1 text-xs">
                <li>‚ùå –†–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫</li>
                <li>‚ùå –°–ª–∏—à–∫–æ–º –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö —Ü–µ–ª–µ–π</li>
                <li>‚ùå –ú–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å</li>
                <li>‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–µ–≤ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫</li>
                <li>‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç—Ä–∏–∫</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}