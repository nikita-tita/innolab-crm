const puppeteer = require('puppeteer');

async function testFrontend() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');

  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
  const consoleLogs = [];
  page.on('console', msg => {
    consoleLogs.push(`${msg.type()}: ${msg.text()}`);
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
  const errors = [];
  page.on('pageerror', error => {
    errors.push(error.message);
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
  const requests = [];
  page.on('request', request => {
    if (request.url().includes('/api/')) {
      requests.push({
        url: request.url(),
        method: request.method()
      });
    }
  });

  const responses = [];
  page.on('response', async response => {
    if (response.url().includes('/api/')) {
      try {
        const body = await response.text();
        responses.push({
          url: response.url(),
          status: response.status(),
          body: body.substring(0, 500) // –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        });
      } catch (e) {
        responses.push({
          url: response.url(),
          status: response.status(),
          error: 'Could not read body'
        });
      }
    }
  });

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüì± –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
    await page.goto('https://innolab-crm.vercel.app', { waitUntil: 'networkidle0' });

    const title = await page.title();
    console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);

    // 2. –õ–æ–≥–∏–Ω
    console.log('\nüîê –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');

    // –ò—â–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      await page.type('input[type="email"]', 'test@example.com');
      await page.type('input[type="password"]', 'test123');

      console.log('üìù –í–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');

      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
      await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle0' }),
        page.click('button[type="submit"]')
      ]);

      console.log('‚úÖ –õ–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } else {
      console.log('‚ùå –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–¥–µ–π
    console.log('\nüí° –¢–µ—Å—Ç 3: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–¥–µ–π');
    await page.goto('https://innolab-crm.vercel.app/ideas', { waitUntil: 'networkidle0' });

    await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    const ideasContent = await page.evaluate(() => {
      const createButton = document.querySelector('button');
      const ideaCards = document.querySelectorAll('[data-testid="idea-card"], .idea-card, h3, h2');
      const content = document.body.textContent;

      return {
        hasCreateButton: !!createButton,
        createButtonText: createButton?.textContent || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞',
        ideaCardsCount: ideaCards.length,
        hasArendaText: content.includes('–ê—Ä–µ–Ω–¥–∞'),
        hasDepositText: content.includes('–¥–µ–ø–æ–∑–∏—Ç'),
        hasStraxovanieText: content.includes('—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω'),
        fullContent: content.substring(0, 1000)
      };
    });

    console.log('üìä –ö–æ–Ω—Ç–µ–Ω—Ç –∏–¥–µ–π:', ideasContent);

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–±–∞–Ω–∞
    console.log('\nüåä –¢–µ—Å—Ç 4: –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞');
    await page.goto('https://innolab-crm.vercel.app/kanban', { waitUntil: 'networkidle0' });

    await new Promise(resolve => setTimeout(resolve, 3000)); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    const kanbanContent = await page.evaluate(() => {
      const columns = document.querySelectorAll('[data-testid="kanban-column"], .kanban-column, .bg-gray-50');
      const cards = document.querySelectorAll('[data-testid="kanban-card"], .kanban-card, .bg-white');
      const content = document.body.textContent;

      return {
        columnsCount: columns.length,
        cardsCount: cards.length,
        hasArendaText: content.includes('–ê—Ä–µ–Ω–¥–∞'),
        hasGipotezaText: content.includes('–ì–∏–ø–æ—Ç–µ–∑–∞') || content.includes('–≥–∏–ø–æ—Ç–µ–∑'),
        hasExperimentText: content.includes('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç') || content.includes('—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç'),
        hasEmptyText: content.includes('–ø—É—Å—Ç–∞') || content.includes('–°–æ–∑–¥–∞–π—Ç–µ'),
        fullContent: content.substring(0, 1000)
      };
    });

    console.log('üìä –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–±–∞–Ω–∞:', kanbanContent);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüåê –¢–µ—Å—Ç 5: API –∑–∞–ø—Ä–æ—Å—ã');
    console.log('üì° –ó–∞–ø—Ä–æ—Å—ã:', requests);
    console.log('üì• –û—Ç–≤–µ—Ç—ã:', responses);

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log('\nüìù –¢–µ—Å—Ç 6: –õ–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏');
    consoleLogs.forEach(log => console.log('  ', log));

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    console.log('\n‚ùå –¢–µ—Å—Ç 7: –û—à–∏–±–∫–∏ JavaScript');
    if (errors.length > 0) {
      errors.forEach(error => console.log('  ‚ùå', error));
    } else {
      console.log('  ‚úÖ –û—à–∏–±–æ–∫ JavaScript –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');

    const hasIdeasData = ideasContent.hasArendaText && ideasContent.hasDepositText;
    const hasKanbanData = kanbanContent.hasArendaText && kanbanContent.cardsCount > 0;
    const hasAPIErrors = responses.some(r => r.status >= 400);

    console.log('üí° –ò–¥–µ–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è:', hasIdeasData ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    console.log('üåä –ö–∞–Ω–±–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω:', hasKanbanData ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    console.log('üåê API —Ä–∞–±–æ—Ç–∞–µ—Ç:', hasAPIErrors ? '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò' : '‚úÖ –û–ö');
    console.log('üìù JS –æ—à–∏–±–∫–∏:', errors.length > 0 ? '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò' : '‚úÖ –ù–ï–¢');

    if (!hasIdeasData || !hasKanbanData || hasAPIErrors || errors.length > 0) {
      console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:');

      if (!hasIdeasData) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–¥–µ—è–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API /api/ideas');
      }

      if (!hasKanbanData) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–Ω–±–∞–Ω–æ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API /api/ideas?include=hypotheses,experiments');
      }

      if (hasAPIErrors) {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API - —Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ');
      }

      if (errors.length > 0) {
        console.log('‚ùå JavaScript –æ—à–∏–±–∫–∏ - —Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ');
      }
    } else {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await browser.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFrontend().catch(console.error);