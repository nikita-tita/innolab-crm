import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { prisma } from "@/lib/prisma"

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const experimentId = params.id

    // Get experiment with all related data
    const experiment = await prisma.experiment.findUnique({
      where: { id: experimentId },
      include: {
        hypothesis: {
          include: {
            successCriteria: true,
            idea: {
              select: { title: true }
            }
          }
        },
        results: {
          orderBy: { createdAt: "desc" }
        },
        creator: {
          select: { name: true, email: true }
        }
      }
    })

    if (!experiment) {
      return NextResponse.json({ error: "Experiment not found" }, { status: 404 })
    }

    // Generate analysis
    const analysis = generateExperimentAnalysis(experiment)

    return NextResponse.json(analysis)
  } catch (error) {
    console.error("Error generating experiment analysis:", error)
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    )
  }
}

function generateExperimentAnalysis(experiment: Record<string, any>) {
  const { hypothesis, results } = experiment
  const successCriteria = hypothesis.successCriteria || []

  // Calculate overall success rate
  const criteriaWithResults = successCriteria.map((criteria: Record<string, any>) => {
    const matchingResult = results.find((result: Record<string, any>) =>
      result.metricName.toLowerCase().includes(criteria.name.toLowerCase()) ||
      criteria.name.toLowerCase().includes(result.metricName.toLowerCase())
    )

    const achieved = matchingResult ? matchingResult.value >= criteria.targetValue : false
    const achievement = matchingResult
      ? ((matchingResult.value / criteria.targetValue) * 100)
      : 0

    return {
      ...criteria,
      actualValue: matchingResult?.value || null,
      achieved,
      achievement,
      result: matchingResult
    }
  })

  const achievedCriteria = criteriaWithResults.filter(c => c.achieved)
  const totalCriteria = criteriaWithResults.length
  const successRate = totalCriteria > 0 ? (achievedCriteria.length / totalCriteria) * 100 : 0

  // Determine hypothesis status recommendation
  let recommendedStatus = hypothesis.status
  let statusReason = ""

  if (results.length === 0) {
    recommendedStatus = "IN_EXPERIMENT"
    statusReason = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
  } else if (successRate >= 80) {
    recommendedStatus = "VALIDATED"
    statusReason = `–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ (${successRate.toFixed(0)}%)`
  } else if (successRate >= 50) {
    recommendedStatus = "IN_EXPERIMENT"
    statusReason = `–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö (${successRate.toFixed(0)}%), —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑`
  } else if (totalCriteria > 0 && successRate < 50) {
    recommendedStatus = "INVALIDATED"
    statusReason = `–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã (${successRate.toFixed(0)}%)`
  }

  // Generate insights and recommendations
  const insights = generateInsights(experiment, criteriaWithResults, successRate)
  const recommendations = generateRecommendations(experiment, criteriaWithResults, successRate)

  // Calculate statistical significance (simplified)
  const statisticalSignificance = calculateStatisticalSignificance(results, successCriteria)

  return {
    experiment: {
      id: experiment.id,
      title: experiment.title,
      status: experiment.status,
      type: experiment.type
    },
    hypothesis: {
      id: hypothesis.id,
      title: hypothesis.title,
      statement: hypothesis.statement,
      currentStatus: hypothesis.status,
      recommendedStatus,
      statusReason
    },
    metrics: {
      totalResults: results.length,
      totalCriteria,
      achievedCriteria: achievedCriteria.length,
      successRate: Math.round(successRate),
      statisticalSignificance
    },
    criteriaAnalysis: criteriaWithResults,
    insights,
    recommendations,
    nextSteps: generateNextSteps(recommendedStatus, successRate, totalCriteria),
    generatedAt: new Date().toISOString()
  }
}

function generateInsights(experiment: Record<string, any>, criteriaWithResults: Record<string, any>[], successRate: number) {
  const insights = []

  // Performance insights
  if (successRate >= 80) {
    insights.push({
      type: "success",
      title: "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!",
      description: `–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å ${successRate.toFixed(0)}% –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞.`,
      icon: "üéâ"
    })
  } else if (successRate >= 50) {
    insights.push({
      type: "mixed",
      title: "–°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
      description: `–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö. ${successRate.toFixed(0)}% –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.`,
      icon: "‚öñÔ∏è"
    })
  } else if (successRate > 0) {
    insights.push({
      type: "warning",
      title: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –æ–∂–∏–¥–∞–Ω–∏–π",
      description: `–¢–æ–ª—å–∫–æ ${successRate.toFixed(0)}% –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω.`,
      icon: "‚ö†Ô∏è"
    })
  }

  // Individual metric insights
  criteriaWithResults.forEach(criteria => {
    if (criteria.achieved && criteria.achievement > 120) {
      insights.push({
        type: "success",
        title: `–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ "${criteria.name}"`,
        description: `–†–µ–∑—É–ª—å—Ç–∞—Ç ${criteria.actualValue} ${criteria.unit} –ø—Ä–µ–≤—ã—Å–∏–ª —Ü–µ–ª—å –Ω–∞ ${(criteria.achievement - 100).toFixed(0)}%`,
        icon: "üìà"
      })
    } else if (!criteria.achieved && criteria.actualValue) {
      const gap = ((criteria.targetValue - criteria.actualValue) / criteria.targetValue * 100)
      insights.push({
        type: "info",
        title: `–ê–Ω–∞–ª–∏–∑ "${criteria.name}"`,
        description: `–†–µ–∑—É–ª—å—Ç–∞—Ç ${criteria.actualValue} ${criteria.unit} –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –Ω–∞ ${gap.toFixed(0)}%`,
        icon: "üìä"
      })
    }
  })

  // Experiment type specific insights
  if (experiment.type === 'AB_TEST') {
    insights.push({
      type: "info",
      title: "A/B —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
      description: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      icon: "üî¨"
    })
  }

  return insights
}

function generateRecommendations(experiment: Record<string, any>, criteriaWithResults: Record<string, any>[], successRate: number) {
  const recommendations = []

  if (successRate >= 80) {
    recommendations.push({
      priority: "high",
      action: "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ",
      description: "–í–Ω–µ–¥—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      timeframe: "1-2 –Ω–µ–¥–µ–ª–∏"
    })
    recommendations.push({
      priority: "medium",
      action: "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
      description: "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è",
      timeframe: "1-3 –º–µ—Å—è—Ü–∞"
    })
  } else if (successRate >= 50) {
    recommendations.push({
      priority: "high",
      action: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞",
      description: "–ò–∑—É—á–∏—Ç—å, –ø–æ—á–µ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–π",
      timeframe: "1 –Ω–µ–¥–µ–ª—è"
    })
    recommendations.push({
      priority: "medium",
      action: "–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
      description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      timeframe: "2-3 –Ω–µ–¥–µ–ª–∏"
    })
  } else {
    recommendations.push({
      priority: "high",
      action: "–ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥",
      description: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è",
      timeframe: "1-2 –Ω–µ–¥–µ–ª–∏"
    })
    recommendations.push({
      priority: "medium",
      action: "–ò–∑—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—É–¥–∞—á–∏",
      description: "–ü—Ä–æ–≤–µ—Å—Ç–∏ root cause analysis –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º",
      timeframe: "1 –Ω–µ–¥–µ–ª—è"
    })
  }

  // Data quality recommendations
  const resultsCount = experiment.results.length
  if (resultsCount < 3) {
    recommendations.push({
      priority: "medium",
      action: "–°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö",
      description: "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
      timeframe: "Ongoing"
    })
  }

  return recommendations
}

function generateNextSteps(recommendedStatus: string, successRate: number, totalCriteria: number) {
  const steps = []

  switch (recommendedStatus) {
    case "VALIDATED":
      steps.push("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã –Ω–∞ VALIDATED")
      steps.push("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
      steps.push("–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤")
      steps.push("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ post-launch –º–µ—Ç—Ä–∏–∫")
      break

    case "INVALIDATED":
      steps.push("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã –Ω–∞ INVALIDATED")
      steps.push("–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
      steps.push("–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
      steps.push("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å learnings –¥–ª—è –±—É–¥—É—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
      break

    case "IN_EXPERIMENT":
      if (totalCriteria === 0) {
        steps.push("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã")
        steps.push("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
      } else {
        steps.push("–°–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        steps.push("–ü—Ä–æ–≤–µ—Å—Ç–∏ —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        steps.push("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
      }
      break

    default:
      steps.push("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
      steps.push("–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
  }

  return steps
}

function calculateStatisticalSignificance(results: Record<string, any>[], successCriteria: Record<string, any>[]) {
  // Simplified statistical significance calculation
  // In real app, you'd use proper statistical methods

  if (results.length < 2) return "insufficient_data"
  if (results.length >= 3 && successCriteria.length > 0) return "significant"
  if (results.length >= 2) return "moderate"

  return "insufficient_data"
}