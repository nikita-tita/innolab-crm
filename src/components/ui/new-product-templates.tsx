"use client";

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Copy,
  Lightbulb,
  TrendingUp,
  Users,
  Rocket,
  Target,
  DollarSign,
  Clock
} from "lucide-react";

interface NewProductTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  template: string;
  variables: string[];
  example: string;
  tags: string[];
  usageCount: number;
  icon: string;
}

interface NewProductTemplatesProps {
  onSelectTemplate?: (template: NewProductTemplate) => void;
  onCreateFromTemplate?: (template: NewProductTemplate, variables: Record<string, string>) => void;
}

const templates: NewProductTemplate[] = [
  {
    id: "product-market-fit",
    name: "Product-Market Fit",
    category: "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø—Ä–æ—Å–∞",
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ –≤ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ",
    template: "–ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º {product} –¥–ª—è {audience}, —Ç–æ {percentage}% –∏–∑ –Ω–∏—Ö –±—É–¥—É—Ç {action} –≤ —Ç–µ—á–µ–Ω–∏–µ {timeframe}, –ø–æ—Ç–æ–º—É —á—Ç–æ {problem}",
    variables: ["product", "audience", "percentage", "action", "timeframe", "problem"],
    example: "–ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º MVP –∫–∞—Ä—à–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π —Å–ø–∞–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤, —Ç–æ 25% –∏–∑ –Ω–∏—Ö –≤–æ—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å–ª—É–≥–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
    tags: ["—Å–ø—Ä–æ—Å", "MVP", "–≤–∞–ª–∏–¥–∞—Ü–∏—è"],
    usageCount: 45,
    icon: "üéØ"
  },
  {
    id: "pricing-validation",
    name: "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã",
    category: "–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è",
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
    template: "–ï—Å–ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ü–µ–Ω—É {price} –∑–∞ {product}, —Ç–æ {percentage}% —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ {value}",
    variables: ["price", "product", "percentage", "value"],
    example: "–ï—Å–ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ü–µ–Ω—É 2000 —Ä—É–±/–º–µ—Å—è—Ü –∑–∞ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –ò–ü, —Ç–æ 30% —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç –∏–º 10+ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é",
    tags: ["—Ü–µ–Ω–∞", "–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è", "–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å"],
    usageCount: 32,
    icon: "üí∞"
  },
  {
    id: "channel-validation",
    name: "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞",
    category: "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ",
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    template: "–ï—Å–ª–∏ –º—ã –±—É–¥–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å {audience} —á–µ—Ä–µ–∑ {channel}, —Ç–æ –ø–æ–ª—É—á–∏–º {metric} —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º {value}, –ø–æ—Ç–æ–º—É —á—Ç–æ {reason}",
    variables: ["audience", "channel", "metric", "value", "reason"],
    example: "–ï—Å–ª–∏ –º—ã –±—É–¥–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –º–∞–ª—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram-–∫–∞–Ω–∞–ª—ã –ø—Ä–æ –±–∏–∑–Ω–µ—Å, —Ç–æ –ø–æ–ª—É—á–∏–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é 5%, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º —Å–æ–±—Ä–∞–Ω–∞ –Ω–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
    tags: ["–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ", "–∫–∞–Ω–∞–ª—ã", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"],
    usageCount: 28,
    icon: "üì¢"
  },
  {
    id: "feature-priority",
    name: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π",
    category: "–†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
    description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è MVP",
    template: "–ï—Å–ª–∏ –º—ã –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é {feature} –≤ –Ω–∞—à {product}, —Ç–æ {percentage}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç {action}, –ø–æ—Ç–æ–º—É —á—Ç–æ {need}",
    variables: ["feature", "product", "percentage", "action", "need"],
    example: "–ï—Å–ª–∏ –º—ã –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ –Ω–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫, —Ç–æ 70% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –∏—Ö –≥–ª–∞–≤–Ω–∞—è –±–æ–ª—å",
    tags: ["—Ñ—É–Ω–∫—Ü–∏–∏", "MVP", "–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è"],
    usageCount: 41,
    icon: "‚ö°"
  },
  {
    id: "adoption-speed",
    name: "–°–∫–æ—Ä–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è",
    category: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
    template: "–ï—Å–ª–∏ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º {audience} –¥–æ—Å—Ç—É–ø –∫ {product}, —Ç–æ {percentage}% –Ω–∞—á–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ {timeframe}, –ø–æ—Ç–æ–º—É —á—Ç–æ {motivation}",
    variables: ["audience", "product", "percentage", "timeframe", "motivation"],
    example: "–ï—Å–ª–∏ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ç–æ 60% –Ω–∞—á–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏",
    tags: ["–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ", "—Å–∫–æ—Ä–æ—Å—Ç—å", "–ø–æ–≤–µ–¥–µ–Ω–∏–µ"],
    usageCount: 23,
    icon: "üöÄ"
  },
  {
    id: "retention-early",
    name: "–†–∞–Ω–Ω–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ",
    category: "–£–¥–µ—Ä–∂–∞–Ω–∏–µ",
    description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏/–Ω–µ–¥–µ–ª–∏",
    template: "–ï—Å–ª–∏ –º—ã –æ–±–µ—Å–ø–µ—á–∏–º {experience} –≤ –ø–µ—Ä–≤—ã–µ {timeframe} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {product}, —Ç–æ {percentage}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ {value}",
    variables: ["experience", "timeframe", "product", "percentage", "value"],
    example: "–ï—Å–ª–∏ –º—ã –æ–±–µ—Å–ø–µ—á–∏–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —Ç–æ 80% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—É—á–∞—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    tags: ["—É–¥–µ—Ä–∂–∞–Ω–∏–µ", "onboarding", "–ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç"],
    usageCount: 19,
    icon: "üîÑ"
  }
];

export default function NewProductTemplates({ onSelectTemplate, onCreateFromTemplate }: NewProductTemplatesProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<NewProductTemplate | null>(null);
  const [variables, setVariables] = useState<Record<string, string>>({});
  const [generatedHypothesis, setGeneratedHypothesis] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");

  const categories = ["all", ...Array.from(new Set(templates.map(t => t.category)))];

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const generateHypothesis = (template: NewProductTemplate, vars: Record<string, string>) => {
    let generated = template.template;
    template.variables.forEach(variable => {
      const value = vars[variable] || `{${variable}}`;
      generated = generated.replace(new RegExp(`{${variable}}`, 'g'), value);
    });
    return generated;
  };

  const handleVariableChange = (variable: string, value: string) => {
    const newVariables = { ...variables, [variable]: value };
    setVariables(newVariables);

    if (selectedTemplate) {
      setGeneratedHypothesis(generateHypothesis(selectedTemplate, newVariables));
    }
  };

  const handleTemplateSelect = (template: NewProductTemplate) => {
    setSelectedTemplate(template);
    setVariables({});
    setGeneratedHypothesis(template.template);
    if (onSelectTemplate) {
      onSelectTemplate(template);
    }
  };

  const handleCreateHypothesis = () => {
    if (selectedTemplate && onCreateFromTemplate) {
      onCreateFromTemplate(selectedTemplate, variables);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold flex items-center gap-2">
          <Lightbulb className="h-5 w-5" />
          –®–∞–±–ª–æ–Ω—ã –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        </h2>
        <p className="text-gray-600 mt-1">–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑</p>
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="flex gap-4">
        <div className="flex-1">
          <Input
            placeholder="–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <select
          className="px-3 py-2 border border-gray-300 rounded-md"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
        >
          <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          {categories.slice(1).map(category => (
            <option key={category} value={category}>{category}</option>
          ))}
        </select>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        {/* –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ */}
        <Card>
          <CardHeader>
            <CardTitle>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {filteredTemplates.map((template) => (
                <div
                  key={template.id}
                  className={`p-4 border rounded-lg cursor-pointer transition-all ${
                    selectedTemplate?.id === template.id
                      ? "border-blue-500 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => handleTemplateSelect(template)}
                >
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">{template.icon}</span>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <h3 className="font-medium">{template.name}</h3>
                        <Badge variant="outline" className="text-xs">
                          {template.category}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">{template.description}</p>
                      <div className="flex items-center gap-2 mt-2">
                        <span className="text-xs text-gray-500">
                          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {template.usageCount} —Ä–∞–∑
                        </span>
                        <div className="flex gap-1">
                          {template.tags.slice(0, 2).map(tag => (
                            <Badge key={tag} variant="outline" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –†–µ–¥–∞–∫—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑—ã */}
        {selectedTemplate && (
          <Card>
            <CardHeader>
              <CardTitle>–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-sm font-medium">–®–∞–±–ª–æ–Ω:</Label>
                <div className="mt-1 p-3 bg-gray-50 rounded-md text-sm">
                  {selectedTemplate.template}
                </div>
              </div>

              <div>
                <Label className="text-sm font-medium">–ü—Ä–∏–º–µ—Ä:</Label>
                <div className="mt-1 p-3 bg-blue-50 rounded-md text-sm">
                  {selectedTemplate.example}
                </div>
              </div>

              <div className="space-y-3">
                <Label className="text-sm font-medium">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</Label>
                {selectedTemplate.variables.map((variable) => (
                  <div key={variable}>
                    <Label htmlFor={variable} className="text-sm capitalize">
                      {variable}
                    </Label>
                    <Input
                      id={variable}
                      placeholder={`–í–≤–µ–¥–∏—Ç–µ ${variable}...`}
                      value={variables[variable] || ""}
                      onChange={(e) => handleVariableChange(variable, e.target.value)}
                    />
                  </div>
                ))}
              </div>

              <div>
                <Label className="text-sm font-medium">–†–µ–∑—É–ª—å—Ç–∞—Ç:</Label>
                <div className="mt-1">
                  <Textarea
                    value={generatedHypothesis}
                    onChange={(e) => setGeneratedHypothesis(e.target.value)}
                    rows={3}
                    className="resize-none"
                  />
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  className="mt-2"
                  onClick={() => copyToClipboard(generatedHypothesis)}
                >
                  <Copy className="h-4 w-4 mr-1" />
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              </div>

              <div className="flex gap-2">
                <Button onClick={handleCreateHypothesis} className="flex-1">
                  –°–æ–∑–¥–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}