"use client";

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, Circle, Clock, Target, Users, Zap } from "lucide-react";

interface MVPFeature {
  id: string;
  name: string;
  description: string;
  priority: "must-have" | "nice-to-have" | "future";
  effort: number; // –≤ –¥–Ω—è—Ö
  completed: boolean;
}

interface ExperimentType {
  id: string;
  name: string;
  description: string;
  timeline: string;
  icon: string;
  complexity: "low" | "medium" | "high";
}

export default function MVPPlanner() {
  const [selectedExperiment, setSelectedExperiment] = useState<string>("landing");

  const experimentTypes: ExperimentType[] = [
    {
      id: "landing",
      name: "Landing Page",
      description: "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–æ—Å–∞",
      timeline: "2-3 –¥–Ω—è",
      icon: "üåê",
      complexity: "low"
    },
    {
      id: "wizard-of-oz",
      name: "Wizard of Oz",
      description: "–ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é",
      timeline: "1 –Ω–µ–¥–µ–ª—è",
      icon: "üé≠",
      complexity: "medium"
    },
    {
      id: "prototype",
      name: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø",
      description: "–ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –≤ Figma/Framer",
      timeline: "3-5 –¥–Ω–µ–π",
      icon: "üé®",
      complexity: "medium"
    },
    {
      id: "mvp",
      name: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π MVP",
      description: "–ë–∞–∑–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
      timeline: "2-4 –Ω–µ–¥–µ–ª–∏",
      icon: "üöÄ",
      complexity: "high"
    },
    {
      id: "survey",
      name: "–û–ø—Ä–æ—Å –∏ –∏–Ω—Ç–µ—Ä–≤—å—é",
      description: "–ì–ª—É–±–∏–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π",
      timeline: "1 –Ω–µ–¥–µ–ª—è",
      icon: "üìã",
      complexity: "low"
    }
  ];

  const mvpFeatures: MVPFeature[] = [
    {
      id: "1",
      name: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      description: "–ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email",
      priority: "must-have",
      effort: 2,
      completed: false
    },
    {
      id: "2",
      name: "–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
      description: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
      priority: "must-have",
      effort: 7,
      completed: false
    },
    {
      id: "3",
      name: "–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã",
      description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π",
      priority: "nice-to-have",
      effort: 5,
      completed: false
    },
    {
      id: "4",
      name: "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
      description: "–ë–∞–∑–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
      priority: "nice-to-have",
      effort: 4,
      completed: false
    },
    {
      id: "5",
      name: "–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
      description: "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö",
      priority: "future",
      effort: 6,
      completed: false
    }
  ];

  const toggleFeature = (id: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
    console.log(`Toggle feature ${id}`);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "must-have": return "bg-red-100 text-red-800";
      case "nice-to-have": return "bg-yellow-100 text-yellow-800";
      case "future": return "bg-gray-100 text-gray-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case "low": return "text-green-600";
      case "medium": return "text-yellow-600";
      case "high": return "text-red-600";
      default: return "text-gray-600";
    }
  };

  const getTotalEffort = () => {
    return mvpFeatures
      .filter(f => f.priority === "must-have")
      .reduce((sum, f) => sum + f.effort, 0);
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div>
        <h2 className="text-xl font-semibold flex items-center gap-2">
          <Target className="h-5 w-5" />
          –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        </h2>
        <p className="text-gray-600 mt-1">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏ —Å–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ MVP</p>
      </div>

      {/* –¢–∏–ø—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle>–¢–∏–ø—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {experimentTypes.map((type) => (
              <div
                key={type.id}
                className={`p-4 border rounded-lg cursor-pointer transition-all ${
                  selectedExperiment === type.id
                    ? "border-blue-500 bg-blue-50"
                    : "border-gray-200 hover:border-gray-300"
                }`}
                onClick={() => setSelectedExperiment(type.id)}
              >
                <div className="flex items-start gap-3">
                  <span className="text-2xl">{type.icon}</span>
                  <div className="flex-1">
                    <h3 className="font-medium">{type.name}</h3>
                    <p className="text-sm text-gray-600 mt-1">{type.description}</p>
                    <div className="flex items-center gap-2 mt-2">
                      <Badge variant="outline" className="text-xs">
                        <Clock className="h-3 w-3 mr-1" />
                        {type.timeline}
                      </Badge>
                      <span className={`text-xs font-medium ${getComplexityColor(type.complexity)}`}>
                        {type.complexity === "low" && "–ü—Ä–æ—Å—Ç–æ–π"}
                        {type.complexity === "medium" && "–°—Ä–µ–¥–Ω–∏–π"}
                        {type.complexity === "high" && "–°–ª–æ–∂–Ω—ã–π"}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* MVP —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è MVP) */}
      {selectedExperiment === "mvp" && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-5 w-5" />
              MVP —Ñ—É–Ω–∫—Ü–∏–∏
            </CardTitle>
            <div className="text-sm text-gray-600">
              –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (must-have): <strong>{getTotalEffort()} –¥–Ω–µ–π</strong>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {mvpFeatures.map((feature) => (
                <div
                  key={feature.id}
                  className="flex items-center gap-3 p-3 border rounded-lg"
                >
                  <button
                    onClick={() => toggleFeature(feature.id)}
                    className="flex-shrink-0"
                  >
                    {feature.completed ? (
                      <CheckCircle className="h-5 w-5 text-green-600" />
                    ) : (
                      <Circle className="h-5 w-5 text-gray-400" />
                    )}
                  </button>

                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h4 className="font-medium">{feature.name}</h4>
                      <Badge
                        variant="outline"
                        className={`text-xs ${getPriorityColor(feature.priority)}`}
                      >
                        {feature.priority === "must-have" && "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}
                        {feature.priority === "nice-to-have" && "–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ"}
                        {feature.priority === "future" && "–ë—É–¥—É—â–µ–µ"}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">{feature.description}</p>
                  </div>

                  <div className="text-sm text-gray-500">
                    {feature.effort} {feature.effort === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
              <Circle className="h-4 w-4 text-blue-600" />
              <span className="text-sm">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</span>
            </div>
            <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
              <Circle className="h-4 w-4 text-blue-600" />
              <span className="text-sm">–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞</span>
            </div>
            <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
              <Circle className="h-4 w-4 text-blue-600" />
              <span className="text-sm">–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</span>
            </div>
            <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
              <Circle className="h-4 w-4 text-blue-600" />
              <span className="text-sm">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞</span>
            </div>
          </div>

          <div className="mt-6">
            <Button className="w-full">
              –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}