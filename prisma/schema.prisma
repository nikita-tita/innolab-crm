generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String       @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole     @default(PRODUCT_MANAGER)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  accounts          Account[]
  activities        Activity[]
  comments          Comment[]
  experiments       Experiment[] @relation("ExperimentCreator")
  createdHypotheses Hypothesis[] @relation("HypothesisCreator")
  createdIdeas      Idea[]       @relation("IdeaCreator")
  createdMVPs       MVP[]        @relation("MVPCreator")
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Idea {
  id          String       @id @default(cuid())
  title       String
  description String
  category    String?
  priority    Priority     @default(MEDIUM)
  status      IdeaStatus   @default(NEW)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comments    Comment[]
  hypotheses  Hypothesis[]
  creator     User         @relation("IdeaCreator", fields: [createdBy], references: [id])
}

model Hypothesis {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  statement           String
  status              HypothesisStatus  @default(DRAFT)
  priority            Priority          @default(MEDIUM)
  confidenceLevel     Int               @default(50)
  testingMethod       String?
  successCriteriaText String?
  ideaId              String
  createdBy           String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  comments            Comment[]
  experiments         Experiment[]
  creator             User              @relation("HypothesisCreator", fields: [createdBy], references: [id])
  idea                Idea              @relation(fields: [ideaId], references: [id])
  successCriteria     SuccessCriteria[]
}

model Experiment {
  id              String             @id @default(cuid())
  title           String
  description     String
  type            ExperimentType     @default(OTHER)
  status          ExperimentStatus   @default(PLANNING)
  startDate       DateTime?
  endDate         DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  methodology     String?
  timeline        String?
  resources       String?
  successMetrics  String?
  hypothesisId    String
  createdBy       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  comments        Comment[]
  creator         User               @relation("ExperimentCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  hypothesis      Hypothesis         @relation(fields: [hypothesisId], references: [id])
  results         ExperimentResult[]
  mvps            MVP[]
}

model MVP {
  id              String       @id @default(cuid())
  title           String
  description     String
  type            MVPType
  url             String?
  status          MVPStatus    @default(PLANNING)
  features        String?
  technicalSpecs  String?
  resources       String?
  timeline        String?
  successCriteria String?
  createdBy       String
  experimentId    String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  attachments     Attachment[]
  comments        Comment[]
  creator         User         @relation("MVPCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  experiment      Experiment   @relation(fields: [experimentId], references: [id])
}

model SuccessCriteria {
  id           String     @id @default(cuid())
  name         String
  description  String?
  targetValue  Float
  actualValue  Float?
  unit         String
  achieved     Boolean    @default(false)
  hypothesisId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  hypothesis   Hypothesis @relation(fields: [hypothesisId], references: [id])
}

model ExperimentResult {
  id           String     @id @default(cuid())
  metricName   String
  value        Float
  unit         String
  notes        String?
  experimentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  experiment   Experiment @relation(fields: [experimentId], references: [id])
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  userId       String
  ideaId       String?
  hypothesisId String?
  experimentId String?
  mvpId        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  experiment   Experiment? @relation(fields: [experimentId], references: [id])
  hypothesis   Hypothesis? @relation(fields: [hypothesisId], references: [id])
  idea         Idea?       @relation(fields: [ideaId], references: [id])
  mvp          MVP?        @relation(fields: [mvpId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  size      Int
  mimeType  String
  mvpId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mvp       MVP?     @relation(fields: [mvpId], references: [id])
}

model Activity {
  id           String        @id @default(cuid())
  type         ActivityType
  description  String
  entityType   String        // "idea", "hypothesis", "experiment", "mvp"
  entityId     String
  userId       String
  metadata     Json?         // Additional data about the activity
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
}

enum UserRole {
  PRODUCT_MANAGER
  DESIGNER
  MARKETER
  ANALYST
  MIDDLE_OFFICE
  EXECUTIVE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IdeaStatus {
  NEW
  IN_REVIEW
  APPROVED
  IN_DEVELOPMENT
  ARCHIVED
}

enum HypothesisStatus {
  DRAFT
  READY_FOR_TESTING
  IN_EXPERIMENT
  VALIDATED
  INVALIDATED
  ARCHIVED
}

enum ExperimentStatus {
  PLANNING
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum ExperimentType {
  USER_INTERVIEW
  AB_TEST
  PROTOTYPE_TEST
  SURVEY
  MARKET_RESEARCH
  OTHER
}

enum MVPType {
  PROTOTYPE
  LANDING_PAGE
  WIREFRAME
  DEMO
  OTHER
  MOCKUP
}

enum MVPStatus {
  PLANNING
  DEVELOPMENT
  TESTING
  DEPLOYED
  ARCHIVED
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
  COMMENT_ADDED
  EXPERIMENT_STARTED
  EXPERIMENT_COMPLETED
  HYPOTHESIS_VALIDATED
  HYPOTHESIS_INVALIDATED
}
