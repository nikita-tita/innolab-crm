generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String       @unique
  password          String?      // Хешированный пароль
  emailVerified     DateTime?
  image             String?
  role              UserRole     @default(VIEWER)
  status            UserStatus   @default(PENDING)     // Статус пользователя
  isActive          Boolean      @default(true)        // Активен ли пользователь
  lastLoginAt       DateTime?                          // Последний вход
  deletedAt         DateTime?                          // Soft delete timestamp
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([email])
  @@index([role, status])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([deletedAt], map: "idx_user_deleted")
  // Relations
  accounts          Account[]
  activities        Activity[]
  comments          Comment[]
  experiments       Experiment[] @relation("ExperimentCreator")
  createdHypotheses Hypothesis[] @relation("HypothesisCreator")
  ownedHypotheses   Hypothesis[] @relation("HypothesisOwner")
  createdIdeas      Idea[]       @relation("IdeaCreator")
  lessons           Lesson[]
  sessions          Session[]
  iceScores         ICEScore[]
  riceScores        RICEScore[]
  transitions       HypothesisTransition[] @relation("HypothesisTransitions")
  materialRequests  MaterialRequest[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Idea {
  id          String       @id @default(cuid())
  title       String
  description String
  category    String?
  priority    Priority     @default(MEDIUM)
  status      IdeaStatus   @default(NEW)
  context     String?      // Контекст возникновения идеи
  deletedAt   DateTime?    // Soft delete timestamp
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  comments    Comment[]
  hypotheses  Hypothesis[]
  iceScores   ICEScore[]
  creator     User         @relation("IdeaCreator", fields: [createdBy], references: [id])

  // Indexes for performance
  @@index([status, priority])
  @@index([createdBy])
  @@index([createdAt])
  @@index([category], map: "idx_idea_category")
  @@index([status, priority, createdAt])
  @@index([deletedAt], map: "idx_idea_deleted")
}

model Hypothesis {
  id                  String            @id @default(cuid())
  title               String
  description         String?
  statement           String            // Формат "Если X, то Y, потому что Z"
  status              HypothesisStatus  @default(DRAFT)
  priority            Priority          @default(MEDIUM)
  confidenceLevel     Int               @default(50)
  testingMethod       String?
  successCriteriaText String?

  // Уровни гипотез
  level               HypothesisLevel   @default(LEVEL_1)   // Уровень гипотезы


  // Дополнительные поля из методологии
  targetAudience      String?           // Целевая аудитория/сегмент
  userValue           String?           // Ценность для пользователя
  businessImpact      String?           // Влияние на метрики
  financialImpact     String?           // Финансовое обоснование
  strategicAlignment  String?           // Связь с целями компании

  // Гипотеза уровня 1 (базовая формулировка)
  actionDescription   String?           // "Если мы сделаем..." - описание действия
  expectedResult      String?           // "То произойдёт..." - ожидаемый результат
  reasoning           String?           // "Потому что..." - обоснование

  // Гипотеза уровня 2 (после Desk Research)
  deskResearchNotes   String?           // Результаты кабинетного исследования
  deskResearchSources String?           // Источники данных
  deskResearchDate    DateTime?         // Дата проведения desk research
  risks               String?           // Выявленные риски
  opportunities       String?           // Возможности и преимущества
  marketSize          String?           // Размер рынка (TAM/SAM/SOM)
  competitors         String?           // Анализ конкурентов
  assumptions         String?           // Ключевые предположения

  // Дизайн эксперимента
  experimentMethod    String?           // Метод эксперимента
  northStarMetric     String?           // Ведущая метрика (NSM)
  successThreshold    String?           // Порог успеха
  guardrailMetrics    String?           // Метрики-гардрейлы
  sampleSize          Int?              // Размер выборки
  testDuration        Int?              // Длительность теста (дни)
  budget              Float?            // Бюджет эксперимента
  channels            String?           // Каналы привлечения

  // Результаты и выводы
  experimentResults   String?           // Результаты эксперимента
  conclusion          HypothesisConclusion? // Заключение по гипотезе
  conclusionNotes     String?           // Примечания к заключению
  nextSteps           String?           // Следующие шаги
  lessonLearned       String?           // Извлеченные уроки

  // Метаданные
  ownerUserId         String?           // Владелец гипотезы (Product Lead)
  finalPriority       Int?              // Итоговый приоритет после ICE-скоринга
  researchCompleted   Boolean           @default(false)
  experimentDesigned  Boolean           @default(false)
  deletedAt           DateTime?         // Soft delete timestamp

  ideaId              String
  createdBy           String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  comments            Comment[]
  experiments         Experiment[]
  lessons             Lesson[]
  creator             User              @relation("HypothesisCreator", fields: [createdBy], references: [id])
  owner               User?             @relation("HypothesisOwner", fields: [ownerUserId], references: [id])
  idea                Idea              @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  successCriteria     SuccessCriteria[]
  artifacts           Artifact[]
  riceScores          RICEScore[]
  transitions         HypothesisTransition[]

  // Indexes for performance
  @@index([status, level])
  @@index([ideaId])
  @@index([createdBy])
  @@index([ownerUserId], map: "idx_hypothesis_owner")
  @@index([createdAt])
  @@index([priority])
  @@index([status, level, priority])
  @@index([deletedAt], map: "idx_hypothesis_deleted")
  @@unique([ideaId, title], name: "unq_hypothesis_title_per_idea")
}

model Experiment {
  id              String             @id @default(cuid())
  title           String
  description     String
  type            ExperimentType     @default(OTHER)
  status          ExperimentStatus   @default(PLANNING)
  startDate       DateTime?
  endDate         DateTime?
  actualStartDate DateTime?
  actualEndDate   DateTime?
  methodology     String?
  timeline        String?
  resources       String?
  successMetrics  String?
  deletedAt       DateTime?          // Soft delete timestamp
  hypothesisId    String
  createdBy       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  comments        Comment[]
  creator         User               @relation("ExperimentCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  hypothesis      Hypothesis         @relation(fields: [hypothesisId], references: [id], onDelete: Cascade)
  results         ExperimentResult[]
  successCriteria ExperimentSuccessCriteria[]
  lessons         Lesson[]

  // Indexes for performance
  @@index([status, type])
  @@index([hypothesisId])
  @@index([createdBy])
  @@index([startDate, endDate])
  @@index([actualStartDate, actualEndDate])
  @@index([status, startDate, endDate])
  @@index([deletedAt], map: "idx_experiment_deleted")
  @@unique([hypothesisId, title], name: "unq_experiment_title_per_hypothesis")
}


model SuccessCriteria {
  id           String     @id @default(cuid())
  name         String
  description  String?
  targetValue  Float
  actualValue  Float?
  unit         String
  achieved     Boolean    @default(false)
  hypothesisId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  hypothesis   Hypothesis @relation(fields: [hypothesisId], references: [id], onDelete: Cascade)

  // Indexes and constraints
  @@index([hypothesisId])
  @@unique([hypothesisId, name], name: "unq_success_criteria_name_per_hypothesis")
}

model ExperimentResult {
  id           String     @id @default(cuid())
  metricName   String
  value        Float
  unit         String
  notes        String?
  experimentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([experimentId])
}

model ExperimentSuccessCriteria {
  id           String      @id @default(cuid())
  name         String      // Название критерия
  planValue    String      // Планируемый результат (может быть текст или цифра)
  actualValue  String?     // Фактический результат
  unit         String?     // Единица измерения (если применимо)
  isAchieved   Boolean?    // Достигнут ли критерий
  notes        String?     // Дополнительные заметки
  experimentId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  experiment   Experiment  @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([experimentId])
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  userId       String
  ideaId       String?
  hypothesisId String?
  experimentId String?
  deletedAt    DateTime?   // Soft delete timestamp
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations with SET NULL on delete (preserve comment history)
  experiment   Experiment? @relation(fields: [experimentId], references: [id], onDelete: SetNull)
  hypothesis   Hypothesis? @relation(fields: [hypothesisId], references: [id], onDelete: SetNull)
  idea         Idea?       @relation(fields: [ideaId], references: [id], onDelete: SetNull)
  user         User        @relation(fields: [userId], references: [id])

  // Indexes for efficient comment queries
  @@index([ideaId, createdAt], map: "idx_comment_idea_created")
  @@index([hypothesisId, createdAt], map: "idx_comment_hypothesis_created")
  @@index([experimentId, createdAt], map: "idx_comment_experiment_created")
  @@index([userId])
  @@index([deletedAt], map: "idx_comment_deleted")
}


model Artifact {
  id            String     @id @default(cuid())
  name          String     // Название источника
  type          String     // Тип артефакта (исследование, статья, отчет)
  url           String?    // Ссылка на источник
  description   String?    // Краткое описание
  conclusion    String     // Вывод из источника
  hypothesisId  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  hypothesis    Hypothesis @relation(fields: [hypothesisId], references: [id])
}

model ICEScore {
  id           String     @id @default(cuid())
  impact       Int        // Влияние (1-10)
  confidence   Int        // Уверенность (1-10)
  ease         Int        // Простота реализации (1-10)
  comment      String?    // Комментарий к оценке
  userId       String     // Кто оценивал
  ideaId       String     // Только для оценки идей
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  user         User       @relation(fields: [userId], references: [id])
  idea         Idea       @relation(fields: [ideaId], references: [id])

  // Constraints and indexes
  @@unique([userId, ideaId])
  @@index([ideaId, userId], map: "idx_ice_score_idea")
}

model RICEScore {
  id           String     @id @default(cuid())
  reach        Int        // Охват (количество пользователей)
  impact       Int        // Влияние (1-5)
  confidence   Int        // Уверенность (0-100%)
  effort       Int        // Усилия (человеко-дни)
  riceScore    Float?     // Автовычисляемый RICE score
  comment      String?    // Комментарий к оценке
  userId       String     // Кто оценивал
  hypothesisId String     // Только для оценки гипотез
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  user         User       @relation(fields: [userId], references: [id])
  hypothesis   Hypothesis @relation(fields: [hypothesisId], references: [id])

  // Constraints and indexes
  @@unique([userId, hypothesisId])
  @@index([hypothesisId, userId], map: "idx_rice_score_hypothesis")
}

model LabInventory {
  id          String            @id @default(cuid())
  category    InventoryCategory
  name        String
  description String?
  details     Json?             // Дополнительные параметры в JSON формате
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model HypothesisTransition {
  id            String           @id @default(cuid())
  hypothesisId  String
  fromStatus    HypothesisStatus
  toStatus      HypothesisStatus
  fromLevel     HypothesisLevel?
  toLevel       HypothesisLevel?
  notes         String?          // Примечания к переходу
  userId        String           // Кто выполнил переход
  createdAt     DateTime         @default(now())
  hypothesis    Hypothesis       @relation(fields: [hypothesisId], references: [id])
  user          User             @relation("HypothesisTransitions", fields: [userId], references: [id])
}

model FormFieldConfig {
  id          String              @id @default(cuid())
  fieldName   String              // Название поля
  stage       HypothesisStatus    // На каком этапе показывать
  level       HypothesisLevel?    // Для какого уровня гипотезы
  isRequired  Boolean             @default(false)
  isVisible   Boolean             @default(true)
  order       Int                 @default(0)
  label       String              // Отображаемое название
  placeholder String?             // Плейсхолдер
  helpText    String?             // Подсказка
  fieldType   FieldType           @default(TEXT)
  options     Json?               // Для select, radio и т.д.
  validation  Json?               // Правила валидации
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([fieldName, stage, level])
}

model Activity {
  id           String        @id @default(cuid())
  type         ActivityType
  description  String
  entityType   String        // "idea", "hypothesis", "experiment"
  entityId     String
  userId       String
  metadata     Json?         // Additional data about the activity
  createdAt    DateTime      @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id])

  // Indexes for audit trails
  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([type])
}

model HypothesisTemplate {
  id          String   @id @default(cuid())
  name        String   // Название шаблона
  category    String   // Категория (маркетинг, продукт, процесс)
  template    String   // Шаблон "Если X, то Y, потому что Z"
  description String?  // Описание когда использовать
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id              String   @id @default(cuid())
  title           String
  content         String   // Описание урока
  category        String   // Категория урока
  tags            String[] // Теги для поиска
  hypothesisId    String?  // Связь с гипотезой
  experimentId    String?  // Связь с экспериментом
  userId          String   // Автор урока
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  hypothesis      Hypothesis? @relation(fields: [hypothesisId], references: [id])
  experiment      Experiment? @relation(fields: [experimentId], references: [id])
}

model WorkflowStage {
  id          String   @id @default(cuid())
  name        String   // Название этапа
  description String?  // Описание этапа
  order       Int      // Порядок в воронке
  entityType  String   // "idea" или "hypothesis"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  // Команда лаборатории - полный доступ
  LAB_DIRECTOR      // Руководитель лаборатории (Никита Титов)
  PRODUCT_MANAGER   // Менеджер по продукту (Никита Злобин)
  UX_RESEARCHER     // UX-исследователь (Ксения Зюбина)
  MARKETER          // Маркетолог-экспериментатор (Павел Литвинов)
  SALES_EXPERT      // Эксперт по продажам (Ольга Царькова)
  OPERATIONS_EXPERT // Эксперт по операциям (Светлана Макарова)
  HYPOTHESIS_OWNER  // Владелец гипотезы (назначаемый)

  // Наблюдатели - только просмотр
  VIEWER            // Наблюдатель
  STAKEHOLDER       // Заинтересованная сторона

  // Админ
  ADMIN             // Администратор системы
}

enum UserStatus {
  PENDING           // Ожидает активации
  ACTIVE            // Активный пользователь
  INACTIVE          // Неактивный
  BLOCKED           // Заблокирован
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IdeaStatus {
  NEW                // Новая идея (Банк идей)
  SCORED             // Прошла RICE-скоринг
  SELECTED           // Отобрана для проработки
  IN_HYPOTHESIS      // Формулируется гипотеза
  COMPLETED          // Преобразована в гипотезу(ы)
  ARCHIVED           // Архивирована
}

enum HypothesisStatus {
  DRAFT              // Черновик гипотезы - этап "Гипотеза"
  SCORED             // Прошла ICE-скоринг команды
  RESEARCH           // Этап "Исследование" (3А)
  EXPERIMENT_DESIGN  // Этап "Дизайн эксперимента" (3Б)
  READY_FOR_TESTING  // Готова к эксперименту - этап "Эксперимент"
  IN_EXPERIMENT      // В процессе эксперимента
  COMPLETED          // Эксперимент завершен - этап "Результат"
  VALIDATED          // Подтверждена - передача в продукт
  INVALIDATED        // Опровергнута - закрытие
  ITERATION          // Итерация - новый цикл
  ARCHIVED           // Архивирована
}

enum ExperimentStatus {
  PLANNING     // Планирование
  IN_PROGRESS  // Выполняется
  PAUSED       // Приостановлен
  COMPLETED    // Завершен
  CANCELLED    // Отменен
}

enum ExperimentType {
  QUANTITATIVE      // Количественное исследование
  QUALITATIVE       // Качественное исследование (интервью)
  PROTOTYPE         // Прототипирование
  AB_TEST           // A/B тестирование
  SURVEY            // Опросы
  LANDING_PAGE      // Тест лендинга
  DATA_ANALYSIS     // Анализ данных
  OTHER             // Другое
}


enum ActivityType {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
  COMMENT_ADDED
  EXPERIMENT_STARTED
  EXPERIMENT_COMPLETED
  HYPOTHESIS_VALIDATED
  HYPOTHESIS_INVALIDATED
}

enum InventoryCategory {
  TRAFFIC_SOURCE     // Источники трафика
  SALES_VALIDATION   // Валидация через продажи
  RESEARCH_TOOL      // Инструменты исследований
  DEVELOPMENT_TOOL   // Инструменты разработки
  ANALYTICS_TOOL     // Инструменты аналитики
  OTHER             // Прочее
}

enum HypothesisLevel {
  LEVEL_1           // Базовая гипотеза - формулировка "Если..., то..., потому что..."
  LEVEL_2           // Детализированная гипотеза после Desk Research и дизайна эксперимента
}

enum HypothesisConclusion {
  VALIDATED         // Подтверждена
  INVALIDATED       // Опровергнута
  INCONCLUSIVE      // Неоднозначный результат
  NEEDS_MORE_DATA   // Нужно больше данных
}

model MaterialRequest {
  id          String                @id @default(cuid())
  title       String                // Заголовок запроса
  description String                // Описание материала
  category    MaterialCategory      @default(METHODOLOGY)
  status      MaterialRequestStatus @default(PENDING)
  userId      String                // Кто подал запрос
  adminNotes  String?               // Заметки администратора
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Relations
  user        User                  @relation(fields: [userId], references: [id])

  // Indexes
  @@index([status])
  @@index([userId])
  @@index([createdAt])
}

enum MaterialCategory {
  METHODOLOGY       // Методология
  TEMPLATE          // Шаблоны
  CHECKLIST         // Чек-листы
  GUIDE             // Руководства
  OTHER             // Другое
}

enum MaterialRequestStatus {
  PENDING           // Ожидает рассмотрения
  APPROVED          // Одобрен
  REJECTED          // Отклонен
  IN_PROGRESS       // В работе
  COMPLETED         // Выполнен
}

enum FieldType {
  TEXT              // Обычный текст
  TEXTAREA          // Многострочный текст
  NUMBER            // Число
  DATE              // Дата
  SELECT            // Выбор из списка
  MULTISELECT       // Множественный выбор
  RADIO             // Радио-кнопки
  CHECKBOX          // Чекбокс
  EMAIL             // Email
  URL               // URL
  FILE              // Файл
}
